log.prob=rep(NA,n.nodes))
mat_list <- list()
mean_list <- list()
for(i in 1:n.nodes){
nodes[i,]<- c(fit$misc$configs$config[[i]]$theta,
fit$misc$configs$config[[i]]$log.posterior)
mat_list[[i]] <- fit$misc$configs$config[[i]]$Q[1:(smesh$n*tmesh$n),1:(smesh$n*tmesh$n)]
mean_list[[i]] <- fit$misc$configs$config[[i]]$improved.mean[1:(smesh$n*tmesh$n)]
}
nodes <- mutate(nodes, weight = exp(log.prob)/exp(max(log.prob))) %>%
mutate(weight.prob = weight*exp(log.prob))
#P <- Reduce("+", Map(function(m, w) m * w, mat_list, nodes$weight.prob))
#weighted.means <- Map(function(v,p) v*p, mean_list, nodes$weight.prob)
#b <- Reduce("+", Map(function(m,w) m%*%w, mat_list,weighted.means))
#new.linpoint <- (1-gamma)*lp.mat[,n] +gamma*solve(P,b)
#New update rule
weighted.means <- Map(function(v,p) v*p, mean_list, nodes$weight.prob)
new.mean <- Reduce("+", weighted.means)
new.linpoint <- (1-gamma)*lp.mat[,n] +gamma*new.mean
plot(new.linpoint, main = paste("Linearisation point", n))
if(max(new.linpoint)-min(new.linpoint) >= 10000*(max(initial.linpoint)-min(initial.linpoint))){#if new lin point is extremely different
print("Linearisation point behaving strangely, fitting model again")
fit <- bru(y ~ loggrow(list(space = geometry, time = time),
model = log_growth_model,
n = smesh$n*tmesh$n),
data = data, domain = list(geometry = smesh,time = tmesh),
samplers = samplers,
family = "gaussian", options = list(verbose = T))
print("First fitting finished")
n.nodes <- fit$misc$configs$nconfig
nodes <- data.frame(LogPrec=rep(NA,n.nodes),
Th1=rep(NA,n.nodes),
Th2=rep(NA,n.nodes),
Th3=rep(NA,n.nodes),
Th4=rep(NA,n.nodes),
log.prob=rep(NA,n.nodes))
mat_list <- list()
mean_list <- list()
for(i in 1:n.nodes){
nodes[i,]<- c(fit$misc$configs$config[[i]]$theta,
fit$misc$configs$config[[i]]$log.posterior)
mat_list[[i]] <- fit$misc$configs$config[[i]]$Q[1:(smesh$n*tmesh$n), 1:(smesh$n*tmesh$n)]
mean_list[[i]] <- fit$misc$configs$config[[i]]$improved.mean[1:(smesh$n*tmesh$n)]
}
nodes <- mutate(nodes, weight = exp(log.prob)/exp(max(log.prob))) %>%
mutate(weight.prob = weight*exp(log.prob))
#New update rule
weighted.means <- Map(function(v,p) v*p, mean_list, nodes$weight.prob)
new.mean <- Reduce("+", weighted.means)
new.linpoint <- (1-gamma)*lp.mat[,n] +gamma*new.mean
}
lp.mat <- cbind(lp.mat,new.linpoint)
print("Updated linpoint")
n <- n+1
}
return(list(fit = fit, n = n, linpoints = lp.mat))
}
library(INLAspacetime)
library(parallel)
ncores <- 1
logit.growth <- function(x,r,k){
x[x<0]<-0
xnew <- x*exp(r*(1-(x/k)))
return(xnew)
}
logit.nest <- function(x0,r,k,n){
df <- data.frame(x = x0, time = rep(0, length(x0)))
for(i in 1:n){
df <- rbind(df,
data.frame(x = logit.growth(df$x[df$time == i-1], r,k),
time = rep(i, length(x0))))
}
return(df)
}
simulate.loggrowth<- function(range_space,range_time, sigma, r, k,
initial, timesteps, npoints, obs.sd, sample.type = "LGCP"){
#browser()
#Set up boundary and mesh
bnd_extended <- spoly(data.frame(easting = c(-1, 2,2,-1), northing = c(-1, -1,2,2)))
mesh_extended <- fm_mesh_2d_inla(boundary = bnd_extended, max.edge = 0.1)
mesh_time <- fm_mesh_1d(loc = 0:timesteps)
#animal initial field
matern_extended <-
inla.spde2.pcmatern(mesh_extended,
prior.sigma = c(0.1, 0.1),
prior.range = c(0.1, 0.1))
initial_Q <- inla.spde.precision(matern_extended,
theta = log(c(range_space, sigma)))
initial_field <- inla.qsample(1, initial_Q, mu = rep(initial, nrow(initial_Q)))[, 1]
mu.df <- logit.nest(initial_field, r, k, timesteps)
gammas <- params2gammas(log(c(range_space, range_time, sigma)), alpha.t = 2,
alpha.s = 2, alpha.e = 0)
stmodel <- stModel.define(smesh = mesh_extended,
tmesh = mesh_time,
model = '220',
control.priors = list(
prs = c(0.1, 0.1),
prt = c(timesteps, 0), psigma = c(1, 0.1)))
animal_Q <- stModel.precision(mesh_extended, mesh_time, "220", gammas, verbose = T)
print("finished constructing precision")
animal_field <- data.frame(time = rep(0:timesteps, each = length(initial_field)),
field = inla.qsample(1, animal_Q,mu = mu.df$x)[, 1])
print("Finished generating field, now expanding")
#Expand for plots
expand_for_plot <- function(i){
animal_tempsf <- expand.grid(
easting = seq(-1,2, by = 0.1),
northing = seq(-1,2, by = 0.1))
animal_tempsf <- mutate(sf::st_as_sf(animal_tempsf, coords = c("easting", "northing")),
time = i)
animal_tempsf$field <- fm_evaluate(
mesh_extended,
loc = animal_tempsf,
field = animal_field$field[animal_field$time == i])
return(animal_tempsf)
}
expanded <- mclapply(0:timesteps, expand_for_plot,  mc.cores = ncores)
animal <- do.call(rbind, expanded)
if(sample.type == "Normal"){
points.to.sample <- sample(unique(st_filter(animal,
st_as_sf(spoly(data.frame(easting = c(0,1,1,0),
northing = c(0, 0, 1, 1)))))$geometry),
npoints)
animal_obs <- filter(animal, geometry %in% points.to.sample) %>%
mutate(obs = rnorm(npoints*(timesteps+1), field, obs.sd))
}
if(sample.type == "LGCP"){
simulate_obs <- function(i){
samp_animal <- sample.lgcp(mesh_extended,
loglambda = log(animal_field$field[animal_field$time == i]))
samp_animal_df <- SpatialPointsDataFrame(samp_animal, data.frame(time = rep(i, nrow(samp_animal@coords))))
return(samp_animal_df)
}
observations <- mclapply(0:timesteps, simulate_obs,  mc.cores =  ncores)
animal_obs <- do.call(rbind, observations)
#remove edge effects
animal_obs<-animal_obs[animal_obs$x>=0&animal_obs$x<=1&animal_obs$y>=0&animal_obs$y<=1,]
animal_obs <- st_as_sf(animal_obs, coords = c("x","y"))
}
return(list(animal = animal,animal_field = animal_field,
animal_obs = animal_obs))
}
out <- simulate.loggrowth(2,2,1.1,0.5,10,5,3,121,sqrt(0.1), sample.type = "Normal")
df <- mutate(out$animal_obs, y = log(obs))
# Fit model ---------------------------------------------------------------
#fit initial year
bnd <- spoly(data.frame(easting = c(0,1,1,0), northing = c(0,0,1,1)))
mesh_obs <- fm_mesh_2d_inla(loc = out$animal_obs$geometry[out$animal_obs$time == 0],
boundary = bnd,
max.edge = c(0.1,1))
bnd <- st_as_sf(bnd)
mesh_time <- fm_mesh_1d(loc = 0:3)
matern <- inla.spde2.pcmatern(mesh_obs,
prior.sigma = c(0.1, 0.1),
prior.range = c(0.1, 0.1))
cmp <- y ~ smooth(geometry, model = matern) +
initial(1,model = "linear", mean.linear = 5, prec.linear = 0.01)-1
fit0 <- bru(cmp, df[df$time == 0,],domain = list(geometry = mesh_obs),
family = "gaussian",samplers = bnd)
#initial.variance <- solve(inla.spde.precision(matern,
#                                              theta = fit0$summary.hyperpar$mean[2:3]))
initial.variance <- Diagonal(mesh_obs$n, (fit0$summary.fixed$sd**2)+(fit0$summary.fitted.values$sd**2))
#fit other years
priors <- list(cc = c(1,3), growth = c(0,2),move = c(0,3),sigma = c(0,2))
iterated.fit <- iterate.fit.gaussian(data = df, smesh = mesh_obs, tmesh = mesh_time, step.size = 1, priors = priors,
samplers = bnd,prior.mean =  rep(fit0$summary.fixed$mean,mesh_obs$n)+fit0$summary.fitted.values$mean[122:(121+mesh_obs$n)],
prior.variance = initial.variance,
max.iter = 100,gamma = 0.25,
stop.crit = 0.05,
initial.linpoint = NULL, initial.growth = 0.6,
initial.inv.carry.cap = 0.10)
box.muller <- function(u1, u2){
x1 <- sqrt(-2log(u1))*cos(2*pi*u2)
x2 <- sqrt(-2*log(u1))*sin(2*pi*u2)
box.muller <- function(u1, u2){
x1 <- sqrt(-2*log(u1))*cos(2*pi*u2)
x2 <- sqrt(-2*log(u1))*sin(2*pi*u2)
return(list(x1 = x1, x2 = x2))
}
u1 <- runif(5000,0,1)
u2 <- runif(5000,0,1)
box.out <- box.muller(u1,u2)
box.muller <- function(u1, u2){
x1 <- sqrt(-2*log(u1))*cos(2*pi*u2)
x2 <- sqrt(-2*log(u1))*sin(2*pi*u2)
return(data,frame(x1 = x1, x2 = x2))
}
box.out <- box.muller(u1,u2)
return(data.frame(x1 = x1, x2 = x2))
box.muller <- function(u1, u2){
x1 <- sqrt(-2*log(u1))*cos(2*pi*u2)
x2 <- sqrt(-2*log(u1))*sin(2*pi*u2)
return(data.frame(x1 = x1, x2 = x2))
}
box.out <- box.muller(u1,u2)
library(ggplot2)
ggplot(box.out)+
geom_hist(aes(x = x1))
ggplot(box.out)+
geom_histogram(aes(x = x1))
ggplot(box.out)+
geom_histogram(aes(x = x2))
ggplot(box.out aes(x = 1:5000))+
ggplot(box.out, aes(x = 1:5000))+
geom_point(aes(y = x1), colour = "dodgerblue")+
geom_point(aes(y = x2), colour = "red")
ggplot(box.out, aes(x = 1:5000))+
geom_point(aes(x = x1, y = x2))
data("Nile")
head(Nile)
str(Nile)
ggplot(Nile)+
geom_histogram()
hist(Nile)
mean(Nile)
median(Nile)
ci <- mean(Nile) + c(-1,1)*sqrt(var(Nile)/length(Nile))*1.96
ci
library(boot)
?boot
boot.sample <- boot(Nile)
boot.sample <- boot(Nile, R = 1)
boot.sample <- boot(Nile,mean, R = 1)
boot.sample <- boot.ci(Nile)
?boot.ci
boot.sample <- boot.ci(Nile, mean, 100)
boot.sample <- boot(Nile, mean, 100)
boot.sample <- boot(Nile, mean, 100, sim = "parametric")
boot_conf <- boot.ci(boot.sample)
boot.sample <- boot(Nile, mean, 100)
boot.mean <- function(data, indices){
out <- mean(data[indices])
return(out)
}
boot.sample <- boot(Nile, mean, 100)
boot.sample <- boot(Nile, boot.mean, 100)
boot_conf <- boot.ci(boot.sample)
boot_conf
ci
boot.median <- function(data, indices){
out <- median(data[indices])
return(out)
}
boot.sample <- boot(Nile, boot.mean, 1000)
boot_conf <- boot.ci(boot.sample)
boot_conf
boot.median <- function(data, indices){
out <- median(data[indices])
return(out)
}
median.sample <- boot(Nile, boot.median, 1000)
median_conf <- boot.ci(median.sample)
median_conf
ci
boot_conf
par(mfrow = c(2,3))
for(n in c(10,100,500,1000,5000,10000)){
samp <- runif(n,0,1)
emp.dist <- stats::ecdf(samp)
stats::plot.ecdf(samp)
}
summary(emp.dist())
summary(emp.dist
)
plot(emp.dist)
par(mfrow = c(2,3))
for(n in c(10,100,500,1000,5000,10000)){
samp <- runif(n,0,1)
emp.dist <- stats::ecdf(samp)
stats::plot.ecdf(samp)
plot(emp.dist)
}
for(n in c(10,100,500,1000,5000,10000)){
samp <- runif(n,0,1)
emp.dist <- stats::ecdf(samp)
stats::plot.ecdf(samp)
curve(emp.dist)
}
?abline
par(mfrow = c(2,3))
for(n in c(10,100,500,1000,5000,10000)){
samp <- runif(n,0,1)
emp.dist <- stats::ecdf(samp)
stats::plot.ecdf(samp)
abline(0,1)
}
abline(0,1, col = "red")
for(n in c(10,100,500,1000,5000,10000)){
samp <- runif(n,0,1)
emp.dist <- stats::ecdf(samp)
stats::plot.ecdf(samp)
abline(0,1, col = "red")
}
?plot.ecdf
stats::plot.ecdf(samp. main = n)
for(n in c(10,100,500,1000,5000,10000)){
samp <- runif(n,0,1)
emp.dist <- stats::ecdf(samp)
stats::plot.ecdf(samp. main = n)
stats::plot.ecdf(samp, main = n)
for(n in c(10,100,500,1000,5000,10000)){
samp <- runif(n,0,1)
emp.dist <- stats::ecdf(samp)
stats::plot.ecdf(samp, main = n)
abline(0,1, col = "red")
}
?ecdf
?curve
for(n in c(10,100,500,1000,5000,10000)){
samp <- rnorm(n,0,1)
emp.dist <- stats::ecdf(samp)
stats::plot.ecdf(samp, main = n)
curve(pnorm, from = min(samp), to = max(samp),
n = 101, add = T, col = "red")
}
?cauchy
for(n in c(10,100,500,1000,5000,10000)){
samp <- rcauchy(n,0,1)
emp.dist <- stats::ecdf(samp)
stats::plot.ecdf(samp, main = n)
curve(pcauchy, from = min(samp), to = max(samp),
n = 101, add = T, col = "red")
}
for(n in c(10,100,500,1000,5000,10000)){
samp <- rnorm(n,0,1)
emp.dist <- stats::ecdf(samp)
stats::plot.ecdf(samp, main = n)
curve(pnorm(samp), #from = min(samp), to = max(samp),
n = 101, add = T, col = "red")
}
curve(pnorm(x), #from = min(samp), to = max(samp),
n = 101, add = T, col = "red")
for(n in c(10,100,500,1000,5000,10000)){
samp <- rcauchy(n,0,1)
emp.dist <- stats::ecdf(samp)
stats::plot.ecdf(samp, main = n)
curve(pnorm, from = min(samp), to = max(samp),
n = 101, add = T, col = "red")
}
for(n in c(10,100,500,1000,5000,10000)){
samp <- rcauchy(n,0,1)
emp.dist <- stats::ecdf(samp)
stats::plot.ecdf(samp, main = n)
curve(pnorm, from = min(samp), to = max(samp),
n = 101, add = T, col = "red")
}
for(n in c(10,100,500,1000,5000,10000)){
samp <- rcauchy(n,0,1)
emp.dist <- stats::ecdf(samp)
stats::plot.ecdf(samp, main = n)
curve(pcauchy, from = min(samp), to = max(samp),
n = 101, add = T, col = "red")
}
for(n in c(10,100,500,1000,5000,10000)){
samp <- rcauchy(n,0,1)
emp.dist <- stats::ecdf(samp)
stats::plot.ecdf(samp, main = n)
curve(pcauchy(x),
n = 101, add = T, col = "red")
}
for(n in c(10,100,500,1000,5000,10000)){
samp <- rcauchy(n,0,1)
emp.dist <- stats::ecdf(samp)
plot(ecdf(samp), main = n)
curve(pcauchy(x), #from = min(samp), to = max(samp),
n = 101, add = T, col = "red")
}
for(n in c(10,100,500,1000,5000,10000)){
samp <- rcauchy(n)
emp.dist <- stats::ecdf(samp)
plot(ecdf(samp), main = n)
curve(pcauchy(x), #from = min(samp), to = max(samp),
n = 101, add = T, col = "red")
}
for(n in c(10,100,500,1000,5000,10000)){
samp <- rcauchy(n)
emp.dist <- stats::ecdf(samp)
plot(ecdf(samp), main = n)
curve(pcauchy, from = min(samp), to = max(samp),
n = 101, add = T, col = "red")
}
?pcauchy
setwd("~/GitHub/INLAlogrowth-package/R")
#' Cgeneric unit test
out.lgcp <- simulate_loggrowth(growth = 1, k = 150, movement = 1, sigma = 20,
initial = 50,timesteps = 4,sample.type = "LGCP")
#' Cgeneric unit test
library(INLAloggrowth)
library(dplyr)
out.lgcp <- simulate_loggrowth(growth = 1, k = 150, movement = 1, sigma = 20,
initial = 50,timesteps = 4,sample.type = "LGCP")
#fit initial year
bnd <- spoly(data.frame(easting = c(0,1,1,0), northing = c(0,0,1,1)))
mesh_obs <- fm_mesh_2d_inla(boundary = bnd,
max.edge = c(0.07,1))
bnd <- st_as_sf(bnd)
library(sf)
bnd <- st_as_sf(bnd)
mesh_time <- fm_mesh_1d(loc = 1:4)
matern <- inla.spde2.pcmatern(mesh_obs,
prior.sigma = c(0.1, 0.1),
prior.range = c(0.1, 0.1))
cmp <- geometry ~ smooth(geometry, model = matern) +
initial(1,model = "linear", mean.linear = length(out.lgcp$animal_obs[out.lgcp$animal_obs$time == 1,]))-1
fit0 <- bru(cmp, out.lgcp$animal_obs[out.lgcp$animal_obs$time == 1,],domain = list(geometry = mesh_obs),
family = "cp",samplers = bnd)
#Find fitted values on mesh points
library(stringr)
index <- min(which(str_sub(rownames(fit0$summary.fitted.values),8,8)!= "A"))
initial.variance <- Diagonal(mesh_obs$n, (fit0$summary.fixed$sd**2)+(fit0$summary.fitted.values$sd[index-1 +1:mesh_obs$n]**2))
#fit other years
priors <- list(cc = c(nrow(out.lgcp$animal_obs[out.lgcp$animal_obs$time == 4,]),50),
growth = c(1,1),move = c(1,1),sigma = c(log(20),1))
iterated.fit.lgcp <- iterate.cgeneric.fit.lgcp(data = out.lgcp$animal_obs, smesh = mesh_obs, tmesh = mesh_time,
samplers = bnd,prior.mean = fit0$summary.fixed$mean +fit0$summary.fitted.values$mean[index-1 +1:mesh_obs$n],
prior.variance = initial.variance, priors = priors,
max.iter = 100,gamma = 0.5,
stop.crit = 0.01,
initial.linpoint = NULL, initial.growth = 0.8,
initial.carry.cap = log(nrow(out.lgcp$animal_obs[out.lgcp$animal_obs$time == 4,])),
verbose = T)
Q
out.lgcp <- simulate_loggrowth(growth = 1, k = 10, movement = 1, sigma = 1,
initial = 5,timesteps = 4,sample.type = "LGCP")
#fit initial year
bnd <- spoly(data.frame(easting = c(0,1,1,0), northing = c(0,0,1,1)))
mesh_obs <- fm_mesh_2d_inla(boundary = bnd,
max.edge = c(0.2,1))
bnd <- st_as_sf(bnd)
mesh_time <- fm_mesh_1d(loc = 1:4)
matern <- inla.spde2.pcmatern(mesh_obs,
prior.sigma = c(0.1, 0.1),
prior.range = c(0.1, 0.1))
cmp <- geometry ~ smooth(geometry, model = matern) +
initial(1,model = "linear", mean.linear = length(out.lgcp$animal_obs[out.lgcp$animal_obs$time == 1,]))-1
fit0 <- bru(cmp, out.lgcp$animal_obs[out.lgcp$animal_obs$time == 1,],domain = list(geometry = mesh_obs),
family = "cp",samplers = bnd)
#Find fitted values on mesh points
library(stringr)
index <- min(which(str_sub(rownames(fit0$summary.fitted.values),8,8)!= "A"))
initial.variance <- Diagonal(mesh_obs$n, (fit0$summary.fixed$sd**2)+(fit0$summary.fitted.values$sd[index-1 +1:mesh_obs$n]**2))
#fit other years
priors <- list(cc = c(nrow(out.lgcp$animal_obs[out.lgcp$animal_obs$time == 4,]),50),
growth = c(1,1),move = c(1,1),sigma = c(log(20),1))
iterated.fit.lgcp <- iterate.cgeneric.fit.lgcp(data = out.lgcp$animal_obs, smesh = mesh_obs, tmesh = mesh_time,
samplers = bnd,prior.mean = fit0$summary.fixed$mean +fit0$summary.fitted.values$mean[index-1 +1:mesh_obs$n],
prior.variance = initial.variance, priors = priors,
max.iter = 100,gamma = 0.5,
stop.crit = 0.01,
initial.linpoint = NULL, initial.growth = 0.8,
initial.carry.cap = log(nrow(out.lgcp$animal_obs[out.lgcp$animal_obs$time == 4,])),
verbose = T)
mesh_obs$n
137*4
?sink
setwd("~/GitHub/INLAlogrowth-package/inst/Tests")
sink("cgen-test.txt")
iterated.fit.lgcp <- iterate.cgeneric.fit.lgcp(data = out.lgcp$animal_obs, smesh = mesh_obs, tmesh = mesh_time,
samplers = bnd,prior.mean = fit0$summary.fixed$mean +fit0$summary.fitted.values$mean[index-1 +1:mesh_obs$n],
prior.variance = initial.variance, priors = priors,
max.iter = 100,gamma = 0.5,
stop.crit = 0.01,
initial.linpoint = NULL, initial.growth = 0.8,
initial.carry.cap = log(nrow(out.lgcp$animal_obs[out.lgcp$animal_obs$time == 4,])),
verbose = T)
sink()
roxygenise()
library(roxygen2)
roxygenise()
setwd("~/GitHub/INLAlogrowth-package")
roxygenise()
roxygenise()
iterated.fit.lgcp <- iterate.cgeneric.fit.lgcp(data = out.lgcp$animal_obs, smesh = mesh_obs, tmesh = mesh_time,
samplers = bnd,prior.mean = fit0$summary.fixed$mean +fit0$summary.fitted.values$mean[index-1 +1:mesh_obs$n],
prior.variance = initial.variance, priors = priors,
max.iter = 100,gamma = 0.5,
stop.crit = 0.01,
initial.linpoint = NULL, initial.growth = 0.8,
initial.carry.cap = log(nrow(out.lgcp$animal_obs[out.lgcp$animal_obs$time == 4,])),
verbose = T)
library(INLAloggrowth)
iterated.fit.lgcp <- iterate.cgeneric.fit.lgcp(data = out.lgcp$animal_obs, smesh = mesh_obs, tmesh = mesh_time,
samplers = bnd,prior.mean = fit0$summary.fixed$mean +fit0$summary.fitted.values$mean[index-1 +1:mesh_obs$n],
prior.variance = initial.variance, priors = priors,
max.iter = 100,gamma = 0.5,
stop.crit = 0.01,
initial.linpoint = NULL, initial.growth = 0.8,
initial.carry.cap = log(nrow(out.lgcp$animal_obs[out.lgcp$animal_obs$time == 4,])),
verbose = T)
devtools::install_github("ljb34/INLAlogrowth", ref = "cgeneric")
detach("package:fmesher", unload = TRUE)
detach("package:INLA", unload = TRUE)
detach("package:inlabru", unload = TRUE)
detach("package:sf", unload = TRUE)
devtools::install_github("ljb34/INLAlogrowth", ref = "cgeneric")
detach("package:fmesher", unload = TRUE)
library(INLAloggrowth)
detach("package:INLAloggrowth", unload = TRUE)
detach("package:inlabru", unload = TRUE)
detach("package:INLA", unload = TRUE)
library(fmesher)
detach("package:fmesher", unload = TRUE)
devtools::install_github("ljb34/INLAlogrowth", ref = "cgeneric")
library(INLAloggrowth)
iterated.fit.lgcp <- iterate.cgeneric.fit.lgcp(data = out.lgcp$animal_obs, smesh = mesh_obs, tmesh = mesh_time,
samplers = bnd,prior.mean = fit0$summary.fixed$mean +fit0$summary.fitted.values$mean[index-1 +1:mesh_obs$n],
prior.variance = initial.variance, priors = priors,
max.iter = 100,gamma = 0.5,
stop.crit = 0.01,
initial.linpoint = NULL, initial.growth = 0.8,
initial.carry.cap = log(nrow(out.lgcp$animal_obs[out.lgcp$animal_obs$time == 4,])),
verbose = T)
